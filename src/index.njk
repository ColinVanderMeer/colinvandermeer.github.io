---
permalink: /index.html
---
<!DOCTYPE html>
<html lang="en">

<head>
	<title>Colin VanderMeer</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<link type="text/css" rel="stylesheet" href="css/style.css">
</head>

<body>

	<canvas id="bg"></canvas>

	<main class="center" style="display: none;">
		<div style="text-align: center;">
			<h1 style="margin-bottom: 0;">I'm Colin VanderMeer</h1>
			<div style="margin-bottom: 1cm;">
				<p><a href="/blog/">Blog</a> | <a href="/projects/">Projects</a> | <a href="/about/">About</a></p>
			</div>
			<a href="https://en.wikipedia.org/wiki/Non-binary_gender"> <img class="eightyeight" src="images/nb_noproblem.jpg" height="62" alt="Non-Binary pride flag"/> </a>
			<img class="eightyeight" src="images/any_browser.gif" height="62" title="Though you will have issues on ladybird..." alt="&quot;Works on any browser&quot;"/>
			<a href="https://en.wikipedia.org/wiki/Right_to_repair"> <img class="eightyeight" src="images/right_to_repair_01.jpg" height="62" alt="I support right to repair"/> </a>
			<a href="https://archlinux.org/"> <img class="eightyeight" src="images/archlinux.gif" height="62" title="If it doesn't have the aur I don't run it on desktop" alt="Arch Linux logo"/> </a>
			<br>
			<a href="https://godotengine.org/"> <img class="eightyeight" src="images/godot.png" height="62" alt="Godot Logo"/> </a>
			<a href="https://rockway.ca/feedbluebell"> <img class="eightyeight" src="images/feedBluebell.png" height="62" alt="Feed Bluebell"/> </a>
			<a href="/blog/"> <img class="eightyeight" src="images/rss8831.png" height="62" title="I don't actually have an rss feed setup yet... So this just sends you to the blog" alt="Rss logo with text that says &quot;Get my blog rss feed&quot;"/> </a>
			<a href="https://github.com/ColinVanderMeer"> <img class="eightyeight" src="images/github.png" height="62" alt="Github logo with text that says &quot;Check out my github&quot;"/> </a>
		</div>
	</main>

	<script type="module">

		import * as THREE from 'three';

		import { EffectComposer } from 'three/addons/postprocessing/EffectComposer';
		import { RenderPixelatedPass } from 'three/addons/postprocessing/RenderPixelatedPass';
		import { OutputPass } from 'three/addons/postprocessing/OutputPass';

		import { GLTFLoader } from 'three/addons/loaders/GLTFLoader';

		let camera, scene, renderer, composer, crystalMesh, clock, aigisModel;


		const loader = new GLTFLoader();
		loader.load( '3d/Aigis.glb', function ( gltf ) {

			aigisModel = gltf.scene;
			aigisModel.position.set( 0, -0.9, 0 );
			aigisModel.scale.set( 0.01, 0.01, 0.01 );
			scene.add( aigisModel );

			document.querySelector('#bg').style.backgroundColor = "gold";
			document.querySelector('.center').style.display = "flex";

			animate();

		}, undefined, function ( e ) {

			console.error( e );

		} );

		init();

		function init() {

			const aspectRatio = window.innerWidth / window.innerHeight;

			camera = new THREE.OrthographicCamera( - aspectRatio, aspectRatio, 1, - 1, 0.1, 10 );
			camera.position.y = 2 * Math.tan( Math.PI / 6 );
			camera.position.z = 2;

      camera.rotation.x = - Math.PI / 6;

			scene = new THREE.Scene();
			scene.background = new THREE.Color( 0x151729 );

			clock = new THREE.Clock();

			renderer = new THREE.WebGLRenderer({
        canvas: document.querySelector('#bg')
      });
			renderer.shadowMap.enabled = true;
			//renderer.setPixelRatio( window.devicePixelRatio );
			renderer.setSize( window.innerWidth, window.innerHeight );

			composer = new EffectComposer( renderer );
			const renderPixelatedPass = new RenderPixelatedPass( 5, scene, camera );
			composer.addPass( renderPixelatedPass );

			const outputPass = new OutputPass();
			composer.addPass( outputPass );

			window.addEventListener( 'resize', onWindowResize );

			// meshes

			// lights

			scene.add( new THREE.AmbientLight( 0x757f8e, 3 ) );

			const directionalLight = new THREE.DirectionalLight( 0xfffecd, 1.5 );
			directionalLight.position.set( 100, 100, 100 );
			directionalLight.castShadow = true;
			directionalLight.shadow.mapSize.set( 2048, 2048 );
			scene.add( directionalLight );

			const spotLight = new THREE.SpotLight( 0xffc100, 10, 10, Math.PI / 16, .02, 2 );
			spotLight.position.set( 2, 2, 0 );
			const target = spotLight.target;
			scene.add( target );
			target.position.set( 0, 0, 0 );
			spotLight.castShadow = true;
			scene.add( spotLight );

		}

		function onWindowResize() {

			const aspectRatio = window.innerWidth / window.innerHeight;
			camera.left = - aspectRatio;
			camera.right = aspectRatio;
			camera.updateProjectionMatrix();

			renderer.setSize( window.innerWidth, window.innerHeight );
			composer.setSize( window.innerWidth, window.innerHeight );

		}

		function animate() {

			requestAnimationFrame( animate );

			const t = clock.getElapsedTime();

			// aigisModel.material.emissiveIntensity = Math.sin( t * 3 ) * .5 + .5;
			aigisModel.position.y = -0.9 + Math.sin( t * 2 ) * .05;
			aigisModel.rotation.y = stopGoEased( t, 2, 4 ) * 2 * Math.PI;

			const rendererSize = renderer.getSize( new THREE.Vector2() );
			const aspectRatio = rendererSize.x / rendererSize.y;

      pixelAlignFrustum( camera, aspectRatio, Math.floor( rendererSize.x / 5 ),
        Math.floor( rendererSize.y / 5 ) );

			composer.render();

		}

		// Helper functions

		function pixelTexture( texture ) {

			texture.minFilter = THREE.NearestFilter;
			texture.magFilter = THREE.NearestFilter;
			texture.generateMipmaps = false;
			texture.wrapS = THREE.RepeatWrapping;
			texture.wrapT = THREE.RepeatWrapping;
			texture.colorSpace = THREE.SRGBColorSpace;
			return texture;

		}

		function easeInOutCubic( x ) {

			return x ** 2 * 3 - x ** 3 * 2;

		}

		function linearStep( x, edge0, edge1 ) {

			const w = edge1 - edge0;
			const m = 1 / w;
			const y0 = - m * edge0;
			return THREE.MathUtils.clamp( y0 + m * x, 0, 1 );

		}

		function stopGoEased( x, downtime, period ) {

			const cycle = ( x / period ) | 0;
			const tween = x - cycle * period;
			const linStep = easeInOutCubic( linearStep( tween, downtime, period ) );
			return cycle + linStep;

		}

		function pixelAlignFrustum( camera, aspectRatio, pixelsPerScreenWidth, pixelsPerScreenHeight ) {

			// 0. Get Pixel Grid Units
			const worldScreenWidth = ( ( camera.right - camera.left ) / camera.zoom );
			const worldScreenHeight = ( ( camera.top - camera.bottom ) / camera.zoom );
			const pixelWidth = worldScreenWidth / pixelsPerScreenWidth;
			const pixelHeight = worldScreenHeight / pixelsPerScreenHeight;

			// 1. Project the current camera position along its local rotation bases
			const camPos = new THREE.Vector3(); camera.getWorldPosition( camPos );
			const camRot = new THREE.Quaternion(); camera.getWorldQuaternion( camRot );
			const camRight = new THREE.Vector3( 1.0, 0.0, 0.0 ).applyQuaternion( camRot );
			const camUp = new THREE.Vector3( 0.0, 1.0, 0.0 ).applyQuaternion( camRot );
			const camPosRight = camPos.dot( camRight );
			const camPosUp = camPos.dot( camUp );

			// 2. Find how far along its position is along these bases in pixel units
			const camPosRightPx = camPosRight / pixelWidth;
			const camPosUpPx = camPosUp / pixelHeight;

			// 3. Find the fractional pixel units and convert to world units
			const fractX = camPosRightPx - Math.round( camPosRightPx );
			const fractY = camPosUpPx - Math.round( camPosUpPx );

			// 4. Add fractional world units to the left/right top/bottom to align with the pixel grid
			camera.left = - aspectRatio - ( fractX * pixelWidth );
			camera.right = aspectRatio - ( fractX * pixelWidth );
			camera.top = 1.0 - ( fractY * pixelHeight );
			camera.bottom = - 1.0 - ( fractY * pixelHeight );
			camera.updateProjectionMatrix();

		}

	</script>
</body>

</html>
